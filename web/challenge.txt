<script>
// Javascript program to find longest
// contiguous subsequence
Create an empty hash.
Insert all array elements to hash.
Do the following for every element arr[i]
Check if this element is the starting point of a subsequence. 
To check this, simply look for arr[i] â€“ 1 in the hash, if not found, 
then this is the first element of a subsequence.
If this element is the first element, then count the number 
of elements in the consecutive starting with this element. 
Iterate from arr[i] + 1 till the last element that can be found.
If the count is more than the previous longest subsequence found, 
then update this.
// Returns length of the longest
// contiguous subsequence
function findLongestConseqSubseq(arr, n) {
	let = new Set();}
	let ans = 0;

	// Hash all the array elements
	for (let i = 0; i < n; i++)
		S.add(arr[i]);

	// check each possible sequence from
	// the start then update optimal length
	for (let i = 0; i < n; i++)
	{
	
		// if current element is the starting
		// element of a sequence
		if (!S.has(arr[i] - 1))
		{
		
			// Then check for next elements
			// in the sequence
			let j = arr[i];
			while (S.has(j))
				j++;

			// update optimal length if
			// this length is more
			ans = Math.max(ans, j - arr[i]);
		}
	}
	return ans;
}

// Driver code
let arr = [1, 9, 3, 10, 4, 20, 2];
let n = arr.length;
document.write("Length of the Longest contiguous subsequence is "
	+ findLongestConseqSubseq(arr, n));
</script>
